// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

// migration ex. npx prisma migrate dev --name init_books_table
// launiching prisma: npx prisma studio
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  username          String            @unique
  password          String
  tokens            Token[]
  posts             Post[]
  age               Int?
  gender            String?
  weight            Float?
  height            Float?
  fitnessLevel      String?
  runningExperience String?
  preferredTerrains String[]
  healthConditions  String[]
  lastKnownLocation String?
  runningGoals      UserRunningGoal[]
  completedRuns     CompletedRun[]
  isProfileComplete Boolean           @default(false)
  activities      UserActivity[]
}

model Token {
  id           Int    @id @default(autoincrement())
  refreshToken String @unique
  userId       Int
  user         User   @relation(fields: [userId], references: [id])
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  userId    String
  user      User     @relation(fields: [userId], references: [username])
  createdAt DateTime @default(now())
  images    Image[]
}

model Image {
  id       Int    @id @default(autoincrement())
  data     Bytes
  mimeType String
  postId   Int
  post     Post   @relation(fields: [postId], references: [id])
}

model UserRunningGoal {
  id          Int       @id @default(autoincrement())
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  goalType    String
  targetValue Float
  deadline    DateTime?
  isCompleted Boolean   @default(false)
}

model Route {
  id               Int            @id @default(autoincrement())
  name             String
  distance         Float
  elevationGain    Float
  terrainType      String
  startPoint       String
  endPoint         String
  waypoints        String[]
  difficulty       String
  sceneryType      String[]
  pointsOfInterest String[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  completedRuns    CompletedRun[]
}

model CompletedRun {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  route    Route    @relation(fields: [routeId], references: [id])
  routeId  Int
  duration Float
  date     DateTime
  weather  String?
  feedback String?
  rating   Int?
}

model UserActivity {
  id               Int      @id @default(autoincrement())
  user             User     @relation(fields: [userId], references: [id])
  userId           Int
  activityType     String
  startDateTime    DateTime
  duration         Int // in seconds
  distance         Float // in meters
  averagePace      Float // in minutes per kilometer
  averageHeartRate Int?
  maxHeartRate     Int?
  caloriesBurned   Int?
  elevationGain    Float? // in meters
  elevationLoss    Float? // in meters
  startLatitude    Float?
  startLongitude   Float?
  endLatitude      Float?
  endLongitude     Float?
  createdAt        DateTime @default(now())
}
